#!/bin/bash

if [ "$#" -lt 1 ]; then
	printf 'Usage: %s (<commit range>|<commit message> -g)\n', "$0" 1>&2
        exit 1
fi

split_re='^([Cc][Oo][Mm][Mm][Ii][Tt])?[[:space:]]*([[:xdigit:]]{5,})([[:space:]]*)(.*)$'
nl=$'\n'
tab=$'\t'
ret_code=0

# Strip the leading and training spaces from a string
strip_spaces()
{
	[[ "$1" =~ ^[[:space:]]*(.*[^[:space:]])[[:space:]]*$ ]]
	echo "${BASH_REMATCH[1]}"
}

process_one_commit()
{
	local fixes_lines="$1"

	while read -r fline; do
		[[ "$fline" =~ ^[[:space:]]*[Ff][Ii][Xx][Ee][Ss]:[[:space:]]*(.*)$ ]]
		f="${BASH_REMATCH[1]}"
		fixes_msg="Fixes tag

  $fline

has these problem(s):

"
		sha=
		subject=
		msg=
		if [[ "$f" =~ $split_re ]]; then
			first="${BASH_REMATCH[1]}"
			sha="${BASH_REMATCH[2]}"
			spaces="${BASH_REMATCH[3]}"
			subject="${BASH_REMATCH[4]}"
			if [ "$first" ]; then
				msg="${msg:+${msg}${nl}}  - leading word '$first' unexpected"
				ret_code=1
			fi
			if [ -z "$subject" ]; then
				msg="${msg:+${msg}${nl}}  - missing subject"
				ret_code=1
			elif [ -z "$spaces" ]; then
				msg="${msg:+${msg}${nl}}  - missing space between the SHA1 and the subject"
				ret_code=1
			fi
		else
			printf '%s%s  - %s\n' "$commit_msg" "$fixes_msg" 'No SHA1 recognised'
			ret_code=1
			commit_msg=''
			continue
		fi
		if ! git rev-parse -q --verify "$sha" >/dev/null; then
			printf '%s%s  - %s\n' "$commit_msg" "$fixes_msg" 'Target SHA1 does not exist'
			fixes_candidates=$(git log --grep="$(echo $subject | sed -e 's/^(\(.*\))$/\1/')" --format="%h")
			if [ ! -z "$fixes_candidates" ]; then
				printf '\nPossible candidate:\n\n'
				printf '  Fixes: %s %s\n' "$fixes_candidates" "$subject"
			fi
			ret_code=1
			commit_msg=''
			continue
		fi

		if [ "${#sha}" -lt 12 ]; then
			msg="${msg:+${msg}${nl}}  - SHA1 should be at least 12 digits long${nl}    Can be fixed by setting core.abbrev to 12 (or more) or (for git v2.11${nl}    or later) just making sure it is not set (or set to \"auto\")."
		fi
		# reduce the subject to the part between () if there
		if [[ "$subject" =~ ^\((.*)\) ]]; then
			subject="${BASH_REMATCH[1]}"
		elif [[ "$subject" =~ ^\((.*) ]]; then
			subject="${BASH_REMATCH[1]}"
			msg="${msg:+${msg}${nl}}  - Subject has leading but no trailing parentheses"
		fi

		# strip matching quotes at the start and end of the subject
		# the unicode characters in the classes are
		# U+201C LEFT DOUBLE QUOTATION MARK
		# U+201D RIGHT DOUBLE QUOTATION MARK
		# U+2018 LEFT SINGLE QUOTATION MARK
		# U+2019 RIGHT SINGLE QUOTATION MARK
		re1=$'^[\"\u201C](.*)[\"\u201D]$'
		re2=$'^[\'\u2018](.*)[\'\u2019]$'
		re3=$'^[\"\'\u201C\u2018](.*)$'
		if [[ "$subject" =~ $re1 ]]; then
			subject="${BASH_REMATCH[1]}"
		elif [[ "$subject" =~ $re2 ]]; then
			subject="${BASH_REMATCH[1]}"
		elif [[ "$subject" =~ $re3 ]]; then
			subject="${BASH_REMATCH[1]}"
			msg="${msg:+${msg}${nl}}  - Subject has leading but no trailing quotes"
			ret_code=1
		fi

		subject=$(strip_spaces "$subject")

		target_subject=$(git log -1 --format='%s' "$sha")
		target_subject=$(strip_spaces "$target_subject")

		# match with ellipses
		case "$subject" in
		*...)	subject="${subject%...}"
			target_subject="${target_subject:0:${#subject}}"
			;;
		...*)	subject="${subject#...}"
			target_subject="${target_subject: -${#subject}}"
			;;
		*\ ...\ *)
			s1="${subject% ... *}"
			s2="${subject#* ... }"
			subject="$s1 $s2"
			t1="${target_subject:0:${#s1}}"
			t2="${target_subject: -${#s2}}"
			target_subject="$t1 $t2"
			;;
		esac
		subject=$(strip_spaces "$subject")
		target_subject=$(strip_spaces "$target_subject")

		if [ "$subject" != "${target_subject:0:${#subject}}" ]; then
			msg="${msg:+${msg}${nl}}  - Subject does not match target commit subject${nl}    Just use${nl}${tab}git log -1 --format='Fixes: %h (\"%s\")'"
			ret_code=1
		fi
		lsha=$(cd "$GIT_DIR" && git rev-parse -q --verify "$sha")
		if [ -z "$lsha" ]; then
			count=$(git rev-list --count "$sha".."$c")
			if [ "$count" -eq 0 ]; then
				msg="${msg:+${msg}${nl}}  - Target is not an ancestor of this commit"
				ret_code=1
			fi
		fi
		if [ "$msg" ]; then
			printf '%s%s%s\n' "$commit_msg" "$fixes_msg" "$msg"
			commit_msg=''
		fi
	done <<< "$fixes_lines"
}

# Commit hook mode
if [ "$#" -eq 2 -a -e "$1" -a "$2" = "-g" ]; then
	# We expect to be given the commit message as argument while running in commit-msg hook
	fixes_lines=$(cat $1 | grep -i '^[[:space:]]*Fixes:')

	process_one_commit "$fixes_lines"
else
	commits=$(git rev-list --no-merges -i --grep='^[[:space:]]*Fixes:' "$@")
	if [ -z "$commits" ]; then
		exit 0
	fi

	for c in $commits; do

		commit_log=$(git log -1 --format='%h ("%s")' "$c")
		commit_msg="In commit

	  $commit_log

	"

		fixes_lines=$(git log -1 --format='%B' "$c" |
				grep -i '^[[:space:]]*Fixes:')

		process_one_commit "$fixes_lines"

	done
fi

exit $ret_code
